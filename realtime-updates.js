// Real-time Updates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏ô‡∏™‡πà‡∏á
import { FirebaseUtils } from './firebase-config.js';
import firebaseAPI from './firebase-api.js';

class RealtimeUpdates {
    constructor() {
        this.listeners = new Map();
        this.isInitialized = false;
        this.callbacks = {
            transports: new Set(),
            vehicles: new Set(),
            users: new Set()
        };
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô real-time listeners (‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ connection errors)
    async initialize() {
        console.log('‚ö†Ô∏è Real-time updates ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Firestore connection errors');
        console.log('üí° ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
        this.isInitialized = false;
        return false;
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö transports (‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    async setupTransportListener() {
        console.log('‚ö†Ô∏è Transport listener ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        // Real-time listeners ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Firestore connection errors
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vehicles (‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    async setupVehicleListener() {
        console.log('‚ö†Ô∏è Vehicle listener ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        // Real-time listeners ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Firestore connection errors
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users (‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    async setupUserListener() {
        console.log('‚ö†Ô∏è User listener ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        // Real-time listeners ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Firestore connection errors
    }

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
    notifyCallbacks(type, data) {
        if (this.callbacks[type]) {
            this.callbacks[type].forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Error in ${type} callback:`, error);
                }
            });
        }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö transports
    updateTransportUI(transports) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á
        const transportTable = document.getElementById('transportTable');
        if (transportTable) {
            this.refreshTransportTable(transports);
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        this.updateTransportStatistics(transports);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó dashboard cards
        this.updateDashboardCards(transports);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vehicles
    updateVehicleUI(vehicles) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
        const vehicleTable = document.getElementById('vehicleTable');
        if (vehicleTable) {
            this.refreshVehicleTable(vehicles);
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
        this.updateVehicleStatistics(vehicles);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users
    updateUserUI(users) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userTable = document.getElementById('userTable');
        if (userTable) {
            this.refreshUserTable(users);
        }
    }

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á
    refreshTransportTable(transports) {
        const tbody = document.querySelector('#transportTable tbody');
        if (!tbody) return;

        tbody.innerHTML = '';
        transports.forEach(transport => {
            const row = this.createTransportRow(transport);
            tbody.appendChild(row);
        });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á
    createTransportRow(transport) {
        const row = document.createElement('tr');
        const statusClass = this.getStatusClass(transport.status);
        
        row.innerHTML = `
            <td>${transport.id}</td>
            <td>${transport.origin}</td>
            <td>${transport.destination}</td>
            <td>${transport.driverName || '-'}</td>
            <td>${transport.vehiclePlate || '-'}</td>
            <td><span class="status-badge ${statusClass}">${this.getStatusText(transport.status)}</span></td>
            <td>${this.formatDate(transport.departureDate)}</td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="viewTransport('${transport.id}')">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-sm btn-warning" onclick="editTransport('${transport.id}')">
                    <i class="fas fa-edit"></i>
                </button>
            </td>
        `;
        
        return row;
    }

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
    refreshVehicleTable(vehicles) {
        const tbody = document.querySelector('#vehicleTable tbody');
        if (!tbody) return;

        tbody.innerHTML = '';
        vehicles.forEach(vehicle => {
            const row = this.createVehicleRow(vehicle);
            tbody.appendChild(row);
        });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
    createVehicleRow(vehicle) {
        const row = document.createElement('tr');
        const statusClass = this.getVehicleStatusClass(vehicle.status);
        
        row.innerHTML = `
            <td>${vehicle.plate}</td>
            <td>${vehicle.type}</td>
            <td>${vehicle.capacity} ‡∏ï‡∏±‡∏ô</td>
            <td>${vehicle.driverName || '-'}</td>
            <td><span class="status-badge ${statusClass}">${this.getVehicleStatusText(vehicle.status)}</span></td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="viewVehicle('${vehicle.id}')">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-sm btn-warning" onclick="editVehicle('${vehicle.id}')">
                    <i class="fas fa-edit"></i>
                </button>
            </td>
        `;
        
        return row;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á
    updateTransportStatistics(transports) {
        const stats = {
            total: transports.length,
            pending: transports.filter(t => t.status === 'pending').length,
            inTransit: transports.filter(t => t.status === 'in_transit').length,
            completed: transports.filter(t => t.status === 'completed').length,
            cancelled: transports.filter(t => t.status === 'cancelled').length
        };

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó DOM elements
        this.updateStatElement('totalTransports', stats.total);
        this.updateStatElement('pendingTransports', stats.pending);
        this.updateStatElement('inTransitTransports', stats.inTransit);
        this.updateStatElement('completedTransports', stats.completed);
        this.updateStatElement('cancelledTransports', stats.cancelled);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
    updateVehicleStatistics(vehicles) {
        const stats = {
            total: vehicles.length,
            available: vehicles.filter(v => v.status === 'available').length,
            inUse: vehicles.filter(v => v.status === 'in_use').length,
            maintenance: vehicles.filter(v => v.status === 'maintenance').length
        };

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó DOM elements
        this.updateStatElement('totalVehicles', stats.total);
        this.updateStatElement('availableVehicles', stats.available);
        this.updateStatElement('inUseVehicles', stats.inUse);
        this.updateStatElement('maintenanceVehicles', stats.maintenance);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó dashboard cards
    updateDashboardCards(transports) {
        const recentTransports = transports
            .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
            .slice(0, 5);

        const recentList = document.getElementById('recentTransportsList');
        if (recentList) {
            recentList.innerHTML = '';
            recentTransports.forEach(transport => {
                const item = document.createElement('div');
                item.className = 'list-group-item';
                item.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">${transport.id}</h6>
                            <p class="mb-1">${transport.origin} ‚Üí ${transport.destination}</p>
                            <small>${this.formatDate(transport.createdAt)}</small>
                        </div>
                        <span class="badge ${this.getStatusClass(transport.status)}">
                            ${this.getStatusText(transport.status)}
                        </span>
                    </div>
                `;
                recentList.appendChild(item);
            });
        }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó element ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    updateStatElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value.toLocaleString();
        }
    }

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    onTransportsUpdate(callback) {
        this.callbacks.transports.add(callback);
        return () => this.callbacks.transports.delete(callback);
    }

    onVehiclesUpdate(callback) {
        this.callbacks.vehicles.add(callback);
        return () => this.callbacks.vehicles.delete(callback);
    }

    onUsersUpdate(callback) {
        this.callbacks.users.add(callback);
        return () => this.callbacks.users.delete(callback);
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å listeners ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    cleanup() {
        this.listeners.forEach((unsubscribe, key) => {
            try {
                unsubscribe();
                console.log(`‚úÖ Unsubscribed from ${key} listener`);
            } catch (error) {
                console.error(`‚ùå Error unsubscribing from ${key}:`, error);
            }
        });
        
        this.listeners.clear();
        this.callbacks.transports.clear();
        this.callbacks.vehicles.clear();
        this.callbacks.users.clear();
        this.isInitialized = false;
    }

    // Utility methods
    getStatusClass(status) {
        const statusClasses = {
            'pending': 'bg-warning',
            'in_transit': 'bg-info',
            'completed': 'bg-success',
            'cancelled': 'bg-danger'
        };
        return statusClasses[status] || 'bg-secondary';
    }

    getStatusText(status) {
        const statusTexts = {
            'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            'in_transit': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á',
            'completed': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
            'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
        };
        return statusTexts[status] || status;
    }

    getVehicleStatusClass(status) {
        const statusClasses = {
            'available': 'bg-success',
            'in_use': 'bg-info',
            'maintenance': 'bg-warning'
        };
        return statusClasses[status] || 'bg-secondary';
    }

    getVehicleStatusText(status) {
        const statusTexts = {
            'available': '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'in_use': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'maintenance': '‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á'
        };
        return statusTexts[status] || status;
    }

    formatDate(dateString) {
        if (!dateString) return '-';
        return new Date(dateString).toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
const realtimeUpdates = new RealtimeUpdates();

// Auto-initialize ‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', async () => {
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firebase config ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(async () => {
        await realtimeUpdates.initialize();
    }, 1000);
});

// Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
window.addEventListener('beforeunload', () => {
    realtimeUpdates.cleanup();
});

// Export
export default realtimeUpdates;
export { RealtimeUpdates };